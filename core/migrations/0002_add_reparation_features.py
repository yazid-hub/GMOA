# Generated by Django 5.2.4 on 2025-07-08 14:59

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='fichiermedia',
            options={'verbose_name': 'Média enrichi', 'verbose_name_plural': 'Médias enrichis'},
        ),
        migrations.AddField(
            model_name='asset',
            name='adresse_complete',
            field=models.TextField(blank=True, help_text="Adresse complète de l'asset", null=True),
        ),
        migrations.AddField(
            model_name='asset',
            name='derniere_maintenance',
            field=models.DateTimeField(blank=True, help_text='Date de la dernière maintenance effectuée', null=True),
        ),
        migrations.AddField(
            model_name='asset',
            name='manuel_technique',
            field=models.FileField(blank=True, help_text="Manuel technique ou documentation de l'équipement", null=True, upload_to='manuels_techniques/'),
        ),
        migrations.AddField(
            model_name='asset',
            name='prochaine_maintenance',
            field=models.DateTimeField(blank=True, help_text='Date prévue de la prochaine maintenance', null=True),
        ),
        migrations.AddField(
            model_name='asset',
            name='qr_code_image',
            field=models.ImageField(blank=True, help_text='Image du QR code généré automatiquement', null=True, upload_to='qr_codes/'),
        ),
        migrations.AddField(
            model_name='fichiermedia',
            name='date_validation',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='fichiermedia',
            name='duree_seconde',
            field=models.PositiveIntegerField(blank=True, help_text='Durée en secondes pour audio/vidéo', null=True),
        ),
        migrations.AddField(
            model_name='fichiermedia',
            name='hash_fichier',
            field=models.CharField(blank=True, help_text="Hash SHA-256 du fichier pour vérifier l'intégrité", max_length=64),
        ),
        migrations.AddField(
            model_name='fichiermedia',
            name='latitude_capture',
            field=models.DecimalField(blank=True, decimal_places=6, help_text='Latitude où le média a été capturé', max_digits=9, null=True),
        ),
        migrations.AddField(
            model_name='fichiermedia',
            name='legende',
            field=models.CharField(blank=True, help_text='Légende ou description du média', max_length=255),
        ),
        migrations.AddField(
            model_name='fichiermedia',
            name='longitude_capture',
            field=models.DecimalField(blank=True, decimal_places=6, help_text='Longitude où le média a été capturé', max_digits=9, null=True),
        ),
        migrations.AddField(
            model_name='fichiermedia',
            name='mots_cles',
            field=models.CharField(blank=True, help_text='Mots-clés séparés par des virgules pour la recherche', max_length=500),
        ),
        migrations.AddField(
            model_name='fichiermedia',
            name='resolution',
            field=models.CharField(blank=True, help_text='Résolution du média (ex: 1920x1080)', max_length=50),
        ),
        migrations.AddField(
            model_name='fichiermedia',
            name='traite_automatiquement',
            field=models.BooleanField(default=False, help_text='Indique si le média a été traité automatiquement (compression, etc.)'),
        ),
        migrations.AddField(
            model_name='fichiermedia',
            name='valide_par',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medias_valides', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ordredetravail',
            name='bloque_par_reparation',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='ordredetravail',
            name='description_detaillee',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='pointdecontrole',
            name='peut_demander_reparation',
            field=models.BooleanField(default=False, help_text="Si coché, ce point peut générer une demande de réparation lors de l'exécution"),
        ),
        migrations.AddField(
            model_name='pointdecontrole',
            name='taille_max_fichier_mb',
            field=models.PositiveIntegerField(default=10, help_text='Taille maximale autorisée pour les fichiers en MB'),
        ),
        migrations.AddField(
            model_name='pointdecontrole',
            name='types_fichiers_autorises',
            field=models.CharField(blank=True, help_text='Types de fichiers autorisés séparés par des virgules (ex: PDF,ZIP,DOC,XLS,JPG,PNG,MP4)', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='fichiermedia',
            name='type_fichier',
            field=models.CharField(choices=[('PHOTO', 'Photographie'), ('AUDIO', 'Enregistrement audio'), ('VIDEO', 'Enregistrement vidéo'), ('DOCUMENT', 'Document (PDF, Word, etc.)'), ('SCHEMA', 'Schéma technique'), ('SIGNATURE', 'Signature électronique')], max_length=20),
        ),
        migrations.CreateModel(
            name='DemandeReparation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_demande', models.CharField(editable=False, help_text='Numéro unique auto-généré (ex: DR-2025-001)', max_length=20, unique=True)),
                ('titre', models.CharField(help_text='Titre court décrivant le problème', max_length=255)),
                ('description', models.TextField(help_text='Description détaillée du problème et des actions nécessaires')),
                ('priorite', models.PositiveIntegerField(choices=[(1, 'Basse - Non urgent'), (2, 'Normale - Standard'), (3, 'Haute - Important'), (4, 'Urgente - Critique')], default=2, help_text='Niveau de priorité de la réparation')),
                ('statut', models.CharField(choices=[('EN_ATTENTE', 'En attente de validation'), ('VALIDEE', 'Validée par le manager'), ('EN_COURS', 'En cours de réalisation'), ('TERMINEE', 'Terminée avec succès'), ('REJETEE', 'Rejetée'), ('REPORTEE', 'Reportée')], default='EN_ATTENTE', help_text='Statut actuel de la demande', max_length=20)),
                ('date_creation', models.DateTimeField(default=django.utils.timezone.now, help_text='Date de création de la demande')),
                ('date_validation', models.DateTimeField(blank=True, help_text='Date de validation par le manager', null=True)),
                ('date_echeance_souhaitee', models.DateField(blank=True, help_text='Date limite souhaitée pour la réparation', null=True)),
                ('date_debut_reparation', models.DateTimeField(blank=True, help_text='Date de début des travaux de réparation', null=True)),
                ('date_fin_reparation', models.DateTimeField(blank=True, help_text='Date de fin des travaux de réparation', null=True)),
                ('cout_estime', models.DecimalField(decimal_places=2, default=0.0, help_text='Coût estimé de la réparation', max_digits=10)),
                ('cout_reel', models.DecimalField(decimal_places=2, default=0.0, help_text='Coût réel de la réparation', max_digits=10)),
                ('commentaire_technicien', models.TextField(blank=True, help_text='Commentaires du technicien sur le problème', null=True)),
                ('commentaire_manager', models.TextField(blank=True, help_text='Commentaires du manager lors de la validation', null=True)),
                ('commentaire_resolution', models.TextField(blank=True, help_text='Commentaires sur la résolution du problème', null=True)),
                ('bloque_cloture_ot', models.BooleanField(default=True, help_text="Si coché, empêche la clôture de l'OT tant que la réparation n'est pas terminée")),
                ('assignee_a', models.ForeignKey(blank=True, help_text='Technicien assigné à la réparation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='demandes_reparation_assignees', to=settings.AUTH_USER_MODEL)),
                ('cree_par', models.ForeignKey(help_text='Technicien ayant créé la demande', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='demandes_reparation_creees', to=settings.AUTH_USER_MODEL)),
                ('ordre_de_travail', models.ForeignKey(help_text='Ordre de travail qui a généré cette demande', on_delete=django.db.models.deletion.CASCADE, related_name='demandes_reparation', to='core.ordredetravail')),
                ('point_de_controle', models.ForeignKey(help_text="Point de contrôle à l'origine de la demande", on_delete=django.db.models.deletion.CASCADE, related_name='demandes_reparation', to='core.pointdecontrole')),
                ('reponse_origine', models.ForeignKey(blank=True, help_text='Réponse qui a déclenché cette demande', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='demandes_reparation', to='core.reponse')),
                ('validee_par', models.ForeignKey(blank=True, help_text='Manager ayant validé la demande', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='demandes_reparation_validees', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Demande de réparation',
                'verbose_name_plural': 'Demandes de réparation',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='HistoriqueModification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_objet', models.CharField(choices=[('ORDRE_TRAVAIL', 'Ordre de Travail'), ('DEMANDE_REPARATION', 'Demande de Réparation'), ('ASSET', 'Asset'), ('INTERVENTION', 'Intervention'), ('RAPPORT', "Rapport d'exécution")], max_length=50)),
                ('objet_id', models.PositiveIntegerField(help_text="ID de l'objet modifié")),
                ('type_action', models.CharField(choices=[('CREATION', 'Création'), ('MODIFICATION', 'Modification'), ('SUPPRESSION', 'Suppression'), ('VALIDATION', 'Validation'), ('ASSIGNATION', 'Assignation'), ('CHANGEMENT_STATUT', 'Changement de statut')], max_length=50)),
                ('description', models.TextField(help_text='Description détaillée de la modification')),
                ('ancienne_valeur', models.JSONField(blank=True, help_text='Valeurs avant modification (format JSON)', null=True)),
                ('nouvelle_valeur', models.JSONField(blank=True, help_text='Nouvelles valeurs (format JSON)', null=True)),
                ('date_modification', models.DateTimeField(default=django.utils.timezone.now)),
                ('adresse_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('utilisateur', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Historique de modification',
                'verbose_name_plural': 'Historiques de modifications',
                'ordering': ['-date_modification'],
            },
        ),
    ]
