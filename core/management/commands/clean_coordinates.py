# Fichier: core/management/commands/clean_coordinates.py

from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.conf import settings
from core.models import Asset
from core.views import validate_coordinates
import logging

logger = logging.getLogger(__name__)

class Command(BaseCommand):
    help = 'Nettoie les coordonn√©es invalides des assets'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Affiche les assets √† nettoyer sans les modifier',
        )
        
        parser.add_argument(
            '--set-null',
            action='store_true',
            help='Met les coordonn√©es invalides √† NULL (par d√©faut)',
        )
        
        parser.add_argument(
            '--delete',
            action='store_true',
            help='Supprime les assets avec coordonn√©es invalides (DANGEREUX)',
        )
        
        parser.add_argument(
            '--report',
            action='store_true',
            help='G√©n√®re un rapport d√©taill√© sans modification',
        )
        
        parser.add_argument(
            '--export',
            type=str,
            help='Exporte les assets invalides vers un fichier CSV',
        )

    def handle(self, *args, **options):
        """
        Traite le nettoyage des coordonn√©es invalides
        """
        try:
            self.stdout.write(self.style.SUCCESS('üßπ D√©but du nettoyage des coordonn√©es invalides'))
            
            # R√©cup√©rer tous les assets avec coordonn√©es
            assets = Asset.objects.filter(
                latitude__isnull=False,
                longitude__isnull=False
            )
            
            total_assets = assets.count()
            self.stdout.write(f"üìä {total_assets} assets avec coordonn√©es trouv√©s")
            
            # Analyser les coordonn√©es
            valid_assets = []
            invalid_assets = []
            
            for asset in assets:
                if validate_coordinates(asset.latitude, asset.longitude):
                    valid_assets.append(asset)
                else:
                    invalid_assets.append(asset)
            
            # Afficher les statistiques
            self.display_statistics(valid_assets, invalid_assets)
            
            # G√©n√©rer un rapport si demand√©
            if options['report']:
                self.generate_report(invalid_assets)
                return
            
            # Exporter si demand√©
            if options['export']:
                self.export_invalid_assets(invalid_assets, options['export'])
                return
            
            # Traiter les assets invalides
            if invalid_assets:
                if options['dry_run']:
                    self.dry_run_preview(invalid_assets)
                elif options['delete']:
                    self.delete_invalid_assets(invalid_assets)
                else:
                    # Par d√©faut: mettre √† NULL
                    self.set_coordinates_null(invalid_assets)
            else:
                self.stdout.write(self.style.SUCCESS('‚úÖ Aucun asset avec coordonn√©es invalides trouv√©'))
                
        except Exception as e:
            logger.error(f"Erreur lors du nettoyage des coordonn√©es: {e}")
            raise CommandError(f'Erreur lors du nettoyage: {e}')

    def display_statistics(self, valid_assets, invalid_assets):
        """
        Affiche les statistiques des coordonn√©es
        """
        total = len(valid_assets) + len(invalid_assets)
        
        self.stdout.write('\n' + '='*50)
        self.stdout.write(self.style.SUCCESS('üìä STATISTIQUES DES COORDONN√âES'))
        self.stdout.write('='*50)
        
        self.stdout.write(f"Total des assets: {total}")
        self.stdout.write(self.style.SUCCESS(f"‚úÖ Coordonn√©es valides: {len(valid_assets)} ({len(valid_assets)/total*100:.1f}%)"))
        self.stdout.write(self.style.ERROR(f"‚ùå Coordonn√©es invalides: {len(invalid_assets)} ({len(invalid_assets)/total*100:.1f}%)"))
        
        if invalid_assets:
            # Analyser les types d'erreurs
            null_coords = sum(1 for asset in invalid_assets if asset.latitude is None or asset.longitude is None)
            zero_coords = sum(1 for asset in invalid_assets if (asset.latitude == 0 and asset.longitude == 0))
            out_of_range = sum(1 for asset in invalid_assets if not (asset.latitude is None or asset.longitude is None or (asset.latitude == 0 and asset.longitude == 0)))
            
            self.stdout.write('\nüìã D√©tail des erreurs:')
            self.stdout.write(f"  - Coordonn√©es NULL: {null_coords}")
            self.stdout.write(f"  - Coordonn√©es (0,0): {zero_coords}")
            self.stdout.write(f"  - Hors limites GPS: {out_of_range}")

    def generate_report(self, invalid_assets):
        """
        G√©n√®re un rapport d√©taill√© des coordonn√©es invalides
        """
        self.stdout.write('\n' + '='*60)
        self.stdout.write(self.style.WARNING('üìã RAPPORT D√âTAILL√â DES COORDONN√âES INVALIDES'))
        self.stdout.write('='*60)
        
        if not invalid_assets:
            self.stdout.write(self.style.SUCCESS('‚úÖ Aucun asset avec coordonn√©es invalides'))
            return
        
        for asset in invalid_assets:
            self.stdout.write(f"\nüîç Asset ID: {asset.id}")
            self.stdout.write(f"   Nom: {asset.nom or 'N/A'}")
            self.stdout.write(f"   R√©f√©rence: {asset.reference or 'N/A'}")
            self.stdout.write(f"   Cat√©gorie: {asset.categorie.nom if asset.categorie else 'N/A'}")
            self.stdout.write(f"   Latitude: {asset.latitude}")
            self.stdout.write(f"   Longitude: {asset.longitude}")
            
            # D√©terminer le type d'erreur
            if asset.latitude is None or asset.longitude is None:
                self.stdout.write(self.style.ERROR("   ‚ùå Erreur: Coordonn√©es NULL"))
            elif asset.latitude == 0 and asset.longitude == 0:
                self.stdout.write(self.style.ERROR("   ‚ùå Erreur: Coordonn√©es (0,0)"))
            elif not (-90 <= asset.latitude <= 90) or not (-180 <= asset.longitude <= 180):
                self.stdout.write(self.style.ERROR("   ‚ùå Erreur: Hors limites GPS"))
            else:
                self.stdout.write(self.style.ERROR("   ‚ùå Erreur: Autre (NaN, type invalide, etc.)"))

    def export_invalid_assets(self, invalid_assets, filename):
        """
        Exporte les assets invalides vers un fichier CSV
        """
        try:
            import csv
            
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = ['id', 'nom', 'reference', 'categorie', 'latitude', 'longitude', 'erreur']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                
                writer.writeheader()
                
                for asset in invalid_assets:
                    # D√©terminer le type d'erreur
                    if asset.latitude is None or asset.longitude is None:
                        erreur = "Coordonn√©es NULL"
                    elif asset.latitude == 0 and asset.longitude == 0:
                        erreur = "Coordonn√©es (0,0)"
                    elif not (-90 <= asset.latitude <= 90) or not (-180 <= asset.longitude <= 180):
                        erreur = "Hors limites GPS"
                    else:
                        erreur = "Autre (NaN, type invalide)"
                    
                    writer.writerow({
                        'id': asset.id,
                        'nom': asset.nom or '',
                        'reference': asset.reference or '',
                        'categorie': asset.categorie.nom if asset.categorie else '',
                        'latitude': asset.latitude,
                        'longitude': asset.longitude,
                        'erreur': erreur
                    })
            
            self.stdout.write(self.style.SUCCESS(f'‚úÖ Export termin√©: {filename}'))
            self.stdout.write(f"üìÑ {len(invalid_assets)} assets export√©s")
            
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur lors de l\'export: {e}'))

    def dry_run_preview(self, invalid_assets):
        """
        Affiche un aper√ßu des modifications qui seraient effectu√©es
        """
        self.stdout.write('\n' + '='*50)
        self.stdout.write(self.style.WARNING('üîç APER√áU DES MODIFICATIONS (DRY RUN)'))
        self.stdout.write('='*50)
        
        self.stdout.write(f"üìä {len(invalid_assets)} assets seraient modifi√©s:")
        
        for asset in invalid_assets[:10]:  # Limiter √† 10 pour l'aper√ßu
            self.stdout.write(f"  - Asset {asset.id} ({asset.nom or 'Sans nom'}): {asset.latitude}, {asset.longitude} ‚Üí NULL, NULL")
        
        if len(invalid_assets) > 10:
            self.stdout.write(f"  ... et {len(invalid_assets) - 10} autres assets")
        
        self.stdout.write(f"\nüí° Pour effectuer les modifications, relancez sans --dry-run")

    def set_coordinates_null(self, invalid_assets):
        """
        Met les coordonn√©es invalides √† NULL
        """
        self.stdout.write('\n' + '='*50)
        self.stdout.write(self.style.WARNING('üîß NETTOYAGE DES COORDONN√âES'))
        self.stdout.write('='*50)
        
        if not invalid_assets:
            return
        
        # Demander confirmation
        confirm = input(f"‚ö†Ô∏è  Voulez-vous vraiment mettre √† NULL les coordonn√©es de {len(invalid_assets)} assets ? (oui/non): ")
        
        if confirm.lower() not in ['oui', 'yes', 'y', 'o']:
            self.stdout.write(self.style.WARNING('‚ùå Op√©ration annul√©e'))
            return
        
        try:
            with transaction.atomic():
                updated_count = 0
                
                for asset in invalid_assets:
                    asset.latitude = None
                    asset.longitude = None
                    asset.save()
                    updated_count += 1
                    
                    if updated_count % 100 == 0:
                        self.stdout.write(f"üìä {updated_count}/{len(invalid_assets)} assets trait√©s...")
                
                self.stdout.write(self.style.SUCCESS(f'‚úÖ {updated_count} assets nettoy√©s avec succ√®s'))
                logger.info(f"Nettoyage termin√©: {updated_count} assets mis √† jour")
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur lors du nettoyage: {e}'))
            logger.error(f"Erreur lors du nettoyage: {e}")
            raise

    def delete_invalid_assets(self, invalid_assets):
        """
        Supprime les assets avec coordonn√©es invalides (DANGEREUX)
        """
        self.stdout.write('\n' + '='*50)
        self.stdout.write(self.style.ERROR('üíÄ SUPPRESSION DES ASSETS INVALIDES'))
        self.stdout.write('='*50)
        
        if not invalid_assets:
            return
        
        self.stdout.write(self.style.ERROR('‚ö†Ô∏è  ATTENTION: Cette op√©ration est IRR√âVERSIBLE !'))
        self.stdout.write(self.style.ERROR(f'‚ö†Ô∏è  {len(invalid_assets)} assets seront D√âFINITIVEMENT supprim√©s'))
        
        # Double confirmation
        confirm1 = input("‚ö†Ô∏è  Tapez 'SUPPRIMER' pour confirmer: ")
        if confirm1 != 'SUPPRIMER':
            self.stdout.write(self.style.WARNING('‚ùå Op√©ration annul√©e'))
            return
        
        confirm2 = input("‚ö†Ô∏è  √ätes-vous ABSOLUMENT s√ªr ? (oui/non): ")
        if confirm2.lower() not in ['oui', 'yes', 'y', 'o']:
            self.stdout.write(self.style.WARNING('‚ùå Op√©ration annul√©e'))
            return
        
        try:
            with transaction.atomic():
                deleted_count = 0
                
                for asset in invalid_assets:
                    asset_id = asset.id
                    asset_nom = asset.nom or 'Sans nom'
                    asset.delete()
                    deleted_count += 1
                    
                    self.stdout.write(f"üóëÔ∏è  Asset {asset_id} ({asset_nom}) supprim√©")
                    
                    if deleted_count % 10 == 0:
                        self.stdout.write(f"üìä {deleted_count}/{len(invalid_assets)} assets supprim√©s...")
                
                self.stdout.write(self.style.ERROR(f'üíÄ {deleted_count} assets supprim√©s d√©finitivement'))
                logger.warning(f"Suppression termin√©e: {deleted_count} assets supprim√©s")
                
        except Exception as e:
            self.stdout.write(self.style.ERROR(f'‚ùå Erreur lors de la suppression: {e}'))
            logger.error(f"Erreur lors de la suppression: {e}")
            raise